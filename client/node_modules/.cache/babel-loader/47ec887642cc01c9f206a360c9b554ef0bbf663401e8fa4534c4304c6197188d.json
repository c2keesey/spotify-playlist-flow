{"ast":null,"code":"var _jsxFileName = \"D:\\\\Spotify Playlist App\\\\playlist-flow\\\\client\\\\src\\\\Playlist.tsx\";\nimport { ListGroup, Container, Row, Col, Image } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_IMG = \"https://via.placeholder.com/1200x1200/424242/FFFFFF/?text=\";\nconst Playlist = _ref => {\n  let {\n    playlist\n  } = _ref;\n  if (playlist == null) {\n    return /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: playlist.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Image, {\n            src: playlist.images.length === 0 ? DEFAULT_IMG : playlist.images[0].url,\n            roundedCircle: true,\n            width: \"100\",\n            height: \"100\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            className: \"playlist-tracks\",\n            style: {\n              maxHeight: \"300px\",\n              overflowY: \"scroll\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n};\n_c = Playlist;\nexport default Playlist;\nvar _c;\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"names":["ListGroup","Container","Row","Col","Image","jsxDEV","_jsxDEV","DEFAULT_IMG","Playlist","_ref","playlist","fileName","_jsxFileName","lineNumber","columnNumber","children","name","src","images","length","url","roundedCircle","width","height","className","style","maxHeight","overflowY","_c","$RefreshReg$"],"sources":["D:/Spotify Playlist App/playlist-flow/client/src/Playlist.tsx"],"sourcesContent":["import { ListGroup, Container, Row, Col, Image } from \"react-bootstrap\";\n\nconst DEFAULT_IMG: string =\n  \"https://via.placeholder.com/1200x1200/424242/FFFFFF/?text=\";\n\ninterface Props {\n  playlist: SpotifyApi.SinglePlaylistResponse | null;\n}\n\nconst Playlist: React.FC<Props> = ({ playlist }) => {\n  if (playlist == null) {\n    return <Container />;\n  } else {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h2>{playlist.name}</h2>\n          </Col>\n          <Col>\n            <Image\n              src={\n                playlist.images.length === 0\n                  ? DEFAULT_IMG\n                  : playlist.images[0].url\n              }\n              roundedCircle\n              width=\"100\"\n              height=\"100\"\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ListGroup\n              className=\"playlist-tracks\"\n              style={{ maxHeight: \"300px\", overflowY: \"scroll\" }}\n            >\n              {/* {playlist.tracks.map((track) => (\n                <ListGroup.Item key={track.id}>\n                  <div>\n                    <strong>{track.name}</strong>\n                    <p>{track.artists.join(\", \")}</p>\n                    <small>{track.album}</small>\n                  </div>\n                </ListGroup.Item>\n              ))} */}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n};\n\nexport default Playlist;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,SAAS,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExE,MAAMC,WAAmB,GACvB,4DAA4D;AAM9D,MAAMC,QAAyB,GAAGC,IAAA,IAAkB;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAD,IAAA;EAC7C,IAAIC,QAAQ,IAAI,IAAI,EAAE;IACpB,oBAAOJ,OAAA,CAACL,SAAS;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EACtB,CAAC,MAAM;IACL,oBACER,OAAA,CAACL,SAAS;MAAAc,QAAA,gBACRT,OAAA,CAACJ,GAAG;QAAAa,QAAA,gBACFT,OAAA,CAACH,GAAG;UAAAY,QAAA,eACFT,OAAA;YAAAS,QAAA,EAAKL,QAAQ,CAACM;UAAI;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAM;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACpB,eACNR,OAAA,CAACH,GAAG;UAAAY,QAAA,eACFT,OAAA,CAACF,KAAK;YACJa,GAAG,EACDP,QAAQ,CAACQ,MAAM,CAACC,MAAM,KAAK,CAAC,GACxBZ,WAAW,GACXG,QAAQ,CAACQ,MAAM,CAAC,CAAC,CAAC,CAACE,GACxB;YACDC,aAAa;YACbC,KAAK,EAAC,KAAK;YACXC,MAAM,EAAC;UAAK;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QACZ;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACF,eACNR,OAAA,CAACJ,GAAG;QAAAa,QAAA,eACFT,OAAA,CAACH,GAAG;UAAAY,QAAA,eACFT,OAAA,CAACN,SAAS;YACRwB,SAAS,EAAC,iBAAiB;YAC3BC,KAAK,EAAE;cAAEC,SAAS,EAAE,OAAO;cAAEC,SAAS,EAAE;YAAS;UAAE;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAWzC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MACR;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACI;EAEhB;AACF,CAAC;AAACc,EAAA,GA5CIpB,QAAyB;AA8C/B,eAAeA,QAAQ;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}